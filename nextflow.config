/*
========================================================================================
    BatchITSx config
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/


// Global default params, used in configs
params {

    // Boilerplate options
    outdir                     = "${launchDir}/results"
    tracedir                   = "${params.outdir}/pipeline_info"
    validate_params            = true
    show_hidden_params         = false
    help                       = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '64.GB'
    max_cpus                   = 16
    max_time                   = '48.h'

}


// Process-specific parameters
process {

    // Error strategy
    errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'

    // Default resources
    cpus   = 1
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time   = { check_max( 2.h  * task.attempt, 'time'   ) }

    // Per-process resources
    withName:dereplicate_vsearch {
        cpus   = 4
        memory = { check_max( 8.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 2.h  * task.attempt, 'time'     ) }
    }

    withName:split_fasta {
        cpus   = 1
        memory = { check_max( 4.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 1.h  * task.attempt, 'time'     ) }
    }

    withName:itsx {
        cpus   = 10
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h   * task.attempt, 'time'    ) }
    }

    withName:itsx_merge {
        cpus   = 1
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }

    withName:parse_itsx_results_F {
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 2.h  * task.attempt, 'time'     ) }
    }

    withName:parse_itsx_results_All {
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 2.h  * task.attempt, 'time'     ) }
    }
}  // end of process configs



// Config profiles
profiles {

    // Test config (built-in data)
    test  { includeConfig 'conf/test.config' }

    // Docker-based profile
    docker {
        docker.enabled         = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Container specifications are here
        includeConfig 'conf/docker.config'
    }

    // Singularity-based profile
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Container specifications are here
        includeConfig 'conf/singularity.config'
    }


    // Profile for the UT HPC cluster
    hpc_ut {
        includeConfig 'conf/hpc_ut.config'
    }

    // Profile for the HPC
    cluster {
        process.executor        = 'slurm'
        process.errorStrategy   = 'retry'
        process.maxRetries      = 2
        process.submitRateLimit = '5 sec'

        // Optional: SLURM job options for logs and email notifications
        process.clusterOptions = '''
            --job-name=BatchITSx
            --output=${params.outdir}/logs/%x.%j.out
            --error=${params.outdir}/logs/%x.%j.err
        '''

        // Container specifications are here
        // includeConfig 'conf/cluster.config'
    }

}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}


manifest {
    name            = 'BatchITSx'
    author          = 'Kessy Abarenkov'
    homePage        = 'https://github.com/kessya/BatchITSx'
    description     = 'Nextflow-based ITSx pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=25.04.6'
    version         = '0.1'
}



// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}